Create database library_management;Use library_management; -- 1. Create TablesCREATE TABLE Books (    BookID INT PRIMARY KEY,    Title VARCHAR(255),    Author VARCHAR(255),    Genre VARCHAR(100),    YearPublished INT,    CopiesAvailable INT);CREATE TABLE Members (    MemberID INT PRIMARY KEY,    FirstName VARCHAR(100),    LastName VARCHAR(100),    DateOfBirth DATE,    MembershipDate DATE);CREATE TABLE Transactions (    TransactionID INT PRIMARY KEY,    MemberID INT,    BookID INT,    IssueDate DATE,    ReturnDate DATE,    FOREIGN KEY (MemberID) REFERENCES Members(MemberID),    FOREIGN KEY (BookID) REFERENCES Books(BookID));-- 2. Insert Sample DataINSERT INTO Books (BookID, Title, Author, Genre, YearPublished, CopiesAvailable) VALUES(1, 'To Kill a Mockingbird', 'Harper Lee', 'Fiction', 1960, 5),(2, '1984', 'George Orwell', 'Dystopian', 1949, 3),(3, 'The Great Gatsby', 'F. Scott Fitzgerald', 'Classic', 1925, 4),(4, 'The Catcher in the Rye', 'J.D. Salinger', 'Classic', 1951, 2);INSERT INTO Members (MemberID, FirstName, LastName, DateOfBirth, MembershipDate) VALUES(1, 'Alice', 'Johnson', '1995-07-14', '2023-01-10'),(2, 'Bob', 'Smith', '1988-11-25', '2022-05-15'),(3, 'Charlie', 'Brown', '2000-06-08', '2024-03-20');INSERT INTO Transactions (TransactionID, MemberID, BookID, IssueDate, ReturnDate) VALUES(1, 1, 2, '2024-07-01', '2024-07-15'),(2, 2, 3, '2024-07-05', NULL),(3, 3, 1, '2024-07-10', '2024-07-20');-- 3. Queries to Practice-- Retrieve all books by a specific authorSELECT * FROM Books WHERE Author = 'George Orwell';-- List books available in a particular genreSELECT * FROM Books WHERE Genre = 'Classic';-- Find members who joined in a specific yearSELECT * FROM Members WHERE YEAR(MembershipDate) = 2023;-- Check which books are currently issued and their due datesSELECT Transactions.TransactionID, Books.Title, Members.FirstName, Members.LastName, Transactions.IssueDate, Transactions.ReturnDate FROM Transactions JOIN Books ON Transactions.BookID = Books.BookID JOIN Members ON Transactions.MemberID = Members.MemberID WHERE Transactions.ReturnDate IS NULL;-- Count the total number of books available in the librarySELECT SUM(CopiesAvailable) AS TotalBooks FROM Books;-- 4. Advanced Queries (Optional)-- Identify the member who has issued the most booksSELECT Members.FirstName, Members.LastName, COUNT(Transactions.TransactionID) AS BooksIssuedFROM TransactionsJOIN Members ON Transactions.MemberID = Members.MemberIDGROUP BY Members.MemberIDORDER BY BooksIssued DESCLIMIT 1;-- Generate a report of overdue booksSELECT Transactions.TransactionID, Books.Title, Members.FirstName, Members.LastName, Transactions.IssueDate, Transactions.ReturnDateFROM TransactionsJOIN Books ON Transactions.BookID = Books.BookIDJOIN Members ON Transactions.MemberID = Members.MemberIDWHERE Transactions.ReturnDate IS NULL AND Transactions.IssueDate < CURDATE() - INTERVAL 14 DAY;